<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>litterbin</groupId>
	<artifactId>l4jissue</artifactId>
	<packaging>jar</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>l4jissue</name>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<groovy.version>2.4.3</groovy.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>${groovy.version}</version>
			<!--
			With "runtime" EXE output is: engineFactories = [jdk.nashorn.api.scripting.NashornScriptEngineFactory@140e19d]
			That is - groovy is missing.
			If you comment this out (making it effectively "compile"), mvn package, run EXE - output is:
            engineFactories = [org.codehaus.groovy.jsr223.GroovyScriptEngineFactory@ad8086, jdk.nashorn.api.scripting.NashornScriptEngineFactory@140e19d]
            That is - groovy is found.
            It should be found in both cases.
			-->
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.5</version>
			</plugin>
			<plugin>
				<groupId>com.akathist.maven.plugins.launch4j</groupId>
				<artifactId>launch4j-maven-plugin</artifactId>
				<version>1.7.1</version>
				<executions>
					<execution>
						<id>l4j-clui</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<headerType>console</headerType>
							<jar>
								${project.build.directory}/${project.artifactId}-${project.version}.jar
							</jar>
							<dontWrapJar>false</dontWrapJar>
							<outfile>${project.build.directory}/xxx.exe
							</outfile>
							<classPath>
								<mainClass>xxx.Main</mainClass>
								<!-- using this will set strict classpath dependencies, even when there are more JARs in
								the directory - don't use <preCp>dependency_libs/*.jar</preCp> because that may cause
								auto-discovery of unwanted components from other modules when single dependency_libs
								contains union of all needed JARs (typical production setup) -->
								<jarLocation>dependency_libs/</jarLocation>
							</classPath>
							<chdir>.</chdir>
							<jre>
								<minVersion>1.8.0</minVersion>
								<jdkPreference>jdkOnly</jdkPreference>
							</jre>
							<versionInfo>
								<fileVersion>1.0.0.0</fileVersion>
								<txtFileVersion>${project.version}</txtFileVersion>
								<fileDescription>${project.name}</fileDescription>
								<copyright>2014 xxx</copyright>
								<productVersion>1.0.0.0</productVersion>
								<txtProductVersion>1.0.0.0</txtProductVersion>
								<productName>${project.name}</productName>
								<companyName>xxx</companyName>
								<internalName>xxx</internalName>
								<originalFilename>xxx.exe</originalFilename>
							</versionInfo>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.9</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.directory}/dependency_libs
							</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>